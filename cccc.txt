// import ClassicEditor from '@ckeditor/ckeditor5-editor-classic/src/classiceditor';
import CKEditorInspector from '@ckeditor/ckeditor5-inspector';

// import Essentials from '@ckeditor/ckeditor5-essentials/src/essentials';
// import Autoformat from '@ckeditor/ckeditor5-autoformat/src/autoformat';
// import BlockQuote from '@ckeditor/ckeditor5-block-quote/src/blockquote';
// import Bold from '@ckeditor/ckeditor5-basic-styles/src/bold';
// import Heading from '@ckeditor/ckeditor5-heading/src/heading';
// import Image from '@ckeditor/ckeditor5-image/src/image';
// import ImageCaption from '@ckeditor/ckeditor5-image/src/imagecaption';
// import ImageStyle from '@ckeditor/ckeditor5-image/src/imagestyle';
// import ImageToolbar from '@ckeditor/ckeditor5-image/src/imagetoolbar';
// import ImageUpload from '@ckeditor/ckeditor5-image/src/imageupload';
// import Base64UploadAdapter from '@ckeditor/ckeditor5-upload/src/adapters/base64uploadadapter';
// import Indent from '@ckeditor/ckeditor5-indent/src/indent';
// import Timestamp from '../src/timestamp';
// import Mention from '@ckeditor/ckeditor5-mention/src/mention';

// import '../theme/icons/style.css';

// import Link from '@ckeditor/ckeditor5-link/src/link';
// import List from '@ckeditor/ckeditor5-list/src/list';
// import MediaEmbed from '@ckeditor/ckeditor5-media-embed/src/mediaembed';
// import Paragraph from '@ckeditor/ckeditor5-paragraph/src/paragraph';
// import Table from '@ckeditor/ckeditor5-table/src/table';
// import TableToolbar from '@ckeditor/ckeditor5-table/src/tabletoolbar';
// import CodeBlock from '@ckeditor/ckeditor5-code-block/src/codeblock';
// import Code from '@ckeditor/ckeditor5-basic-styles/src/code';
import WordCount from '@ckeditor/ckeditor5-word-count/src/wordcount';

// import MyPlugin from '../src/myplugin';

// /* global document, window */
// const maxCharacters = 120;
// const container = document.querySelector( '.demo-update' );
// const progressCircle = document.querySelector( '.demo-update__chart__circle' );
// const charactersBox = document.querySelector( '.demo-update__chart__characters' );
// const wordsBox = document.querySelector( '.demo-update__words' );
// const circleCircumference = Math.floor( 2 * Math.PI * progressCircle.getAttribute( 'r' ) );
// const sendButton = document.querySelector( '.demo-update__send' );
// let text = '';
// let char = [];
// let char1 = [];
// let char2 = [];
// let text2 = '';
// console.log( );

// ClassicEditor
// 	.create( document.querySelector( '#demo-update__editor' ), {
// 		plugins: [
// 			// `MyPlugin` is an example plugin generated by the package generator.
// 			MyPlugin,
// 			Essentials,
// 			Autoformat,
// 			BlockQuote,
// 			Bold,
// 			Heading,
// 			Image,
// 			ImageCaption,
// 			ImageStyle,
// 			ImageToolbar,
// 			ImageUpload,
// 			Indent,
// 			Link,
// 			List,
// 			MediaEmbed,
// 			Paragraph,
// 			Table,
// 			TableToolbar,
// 			CodeBlock,
// 			Code,
// 			Base64UploadAdapter,
// 			WordCount,
// 			Timestamp,
// 			Mention

// 		],
// 		toolbar: [
// 			// `myButton` is an example button provided by the `MyPlugin` class.
// 			'myButton',
// 			'|',
// 			'heading',
// 			'|',
// 			'bold',
// 			'italic',
// 			'link',
// 			'code',
// 			'bulletedList',
// 			'numberedList',
// 			'|',
// 			'outdent',
// 			'indent',
// 			'|',
// 			'uploadImage',
// 			'blockQuote',
// 			'insertTable',
// 			'mediaEmbed',
// 			'codeBlock',
// 			'|',
// 			'undo',
// 			'redo',
// 		    'timestamp',
// 			'wordcount'
// 		],
// 		image: {
// 			toolbar: [ 'imageStyle:inline', 'imageStyle:block', 'imageStyle:side', '|', 'imageTextAlternative' ]
// 		},
// 		table: {
// 			contentToolbar: [
// 				'tableColumn',
// 				'tableRow',
// 				'mergeTableCells'
// 			]
// 		},
// 		mention: {
// 			feeds: [
// 				{
// 					marker: '@',
// 					feed: getFeedItems,
// 					minimumCharacters: 1
// 				},
// 				{
// 					marker: '#',
// 					feed: getFeedItemsHashtag,
// 					minimumCharacters: 1
// 				}
// 			]
// 		},
// 		wordCount: {
// 			onUpdate: stats => {
// 				const charactersProgress = stats.characters / maxCharacters * circleCircumference;
// 				const isLimitExceeded = stats.characters > maxCharacters;
// 				const isCloseToLimit = !isLimitExceeded && stats.characters > maxCharacters * .8;
// 				const circleDashArray = Math.min( charactersProgress, circleCircumference );

// 				// Set the stroke of the circle to show how many characters were typed.
// 				progressCircle.setAttribute( 'stroke-dasharray', `${ circleDashArray },${ circleCircumference }` );

// 				// Display the number of characters in the progress chart. When the limit is exceeded,
// 				// display how many characters should be removed.
// 				if ( isLimitExceeded ) {
// 					charactersBox.textacters;
// 				}Content = `-${ stats.characters - maxCharacters }`;
// 				} else {
// 					charactersBox.textContent = stats.char

// 				text = document.getElementById( 'demo-update__editor' ).textContent;

// 				char = text.split( '' );

// 				if ( char.length > maxCharacters ) {
// 					console.log( 'yes' );
// 					char1 = char.slice( 0, maxCharacters );
// 					char2 = char.slice( maxCharacters, stats.characters );

// 					console.log( char1 );
// 					console.log( char2 );
// 					text2 = document.getElementById( 'char2' ).innerText = char2.join( '' );
// 				} else {
// 					console.log( 'no' );
// 					char1 = char.slice( 0, maxCharacters );
// 					char2 = char.slice( maxCharacters, stats.characters );

// 					console.log( char1 );
// 					console.log( char2 );
// 				}

// 				wordsBox.textContent = `Words in the post: ${ stats.words }`;

// 				// If the content length is close to the character limit, add a CSS class to warn the user.
// 				container.classList.toggle( 'demo-update__limit-close', isCloseToLimit );

// 				// If the character limit is exceeded, add a CSS class that makes the content's background red.
// 				container.classList.toggle( 'demo-update__limit-exceeded', isLimitExceeded );

// 				// If the character limit is exceeded, disable the send button.
// 				sendButton.toggleAttribute( 'disabled', isLimitExceeded );
// 			}
// 		}

// 	} )
// 	.then( editor => {
// 		window.editor = editor;
// 		CKEditorInspector.attach( editor );
// 		window.console.log( 'CKEditor 5 is ready.', editor );
// 	} )
// 	.catch( err => {
// 		window.console.error( err.stack );
// 	} );

// const items = [
// 	{ id: '@swarley', userId: '1', name: 'Barney Stinson', link: 'https://www.imdb.com/title/tt0460649/characters/nm0000439' },
// 	{ id: '@lilypad', userId: '2', name: 'Lily Aldrin', link: 'https://www.imdb.com/title/tt0460649/characters/nm0004989' },
// 	{ id: '@marry', userId: '3', name: 'Marry Ann Lewis', link: 'https://www.imdb.com/title/tt0460649/characters/nm1130627' },
// 	{ id: '@marshmallow', userId: '4', name: 'Marshall Eriksen', link: 'https://www.imdb.com/title/tt0460649/characters/nm0781981' },
// 	{ id: '@rsparkles', userId: '5', name: 'Robin Scherbatsky', link: 'https://www.imdb.com/title/tt0460649/characters/nm1130627' },
// 	{ id: '@tdog', userId: '6', name: 'Ted Mosby', link: 'https://www.imdb.com/title/tt0460649/characters/nm1102140' }
// ];

// const tags = [
// 	{ id: '#swarley', userId: '1', name: 'Barney Stinson', link: 'https://www.imdb.com/title/tt0460649/characters/nm0000439' },
// 	{ id: '#lilypad', userId: '2', name: 'Lily Aldrin', link: 'https://www.imdb.com/title/tt0460649/characters/nm0004989' },
// 	{ id: '#marry', userId: '3', name: 'Marry Ann Lewis', link: 'https://www.imdb.com/title/tt0460649/characters/nm1130627' },
// 	{ id: '#marshmallow', userId: '4', name: 'Marshall Eriksen', link: 'https://www.imdb.com/title/tt0460649/characters/nm0781981' },
// 	{ id: '#rsparkles', userId: '5', name: 'Robin Scherbatsky', link: 'https://www.imdb.com/title/tt0460649/characters/nm1130627' },
// 	{ id: 'tdog', userId: '6', name: 'Ted Mosby', link: 'https://www.imdb.com/title/tt0460649/characters/nm1102140' }
// ];

// function getFeedItems( queryText ) {
// 	// As an example of an asynchronous action, return a promise
// 	// that resolves after a 100ms timeout.
// 	// This can be a server request or any sort of delayed action.
// 	return new Promise( resolve => {
// 		setTimeout( () => {
// 			const itemsToDisplay = items
// 			// Filter out the full list of all items to only those matching the query text.
// 				.filter( isItemMatching )
// 			// Return 10 items max - needed for generic queries when the list may contain hundreds of elements.
// 				.slice( 0, 10 );

// 			resolve( itemsToDisplay );
// 		}, 100 );
// 	} );

// 	// Filtering function - it uses the `name` and `username` properties of an item to find a match.
// 	function isItemMatching( item ) {
// 		// Make the search case-insensitive.
// 		const searchString = queryText.toLowerCase();

// 		// Include an item in the search results if the name or username includes the current user input.
// 		return (
// 			item.name.toLowerCase().includes( searchString ) ||
// 				item.id.toLowerCase().includes( searchString )
// 		);
// 	}
// }

// function getFeedItemsHashtag( queryText ) {
// 	// As an example of an asynchronous action, return a promise
// 	// that resolves after a 100ms timeout.
// 	// This can be a server request or any sort of delayed action.
// 	return new Promise( resolve => {
// 		setTimeout( () => {
// 			const itemsToDisplay = tags
// 			// Filter out the full list of all items to only those matching the query text.
// 				.filter( isItemMatching )
// 			// Return 10 items max - needed for generic queries when the list may contain hundreds of elements.
// 				.slice( 0, 10 );

// 			resolve( itemsToDisplay );
// 		}, 100 );
// 	} );

// 	// Filtering function - it uses the `name` and `username` properties of an item to find a match.
// 	function isItemMatching( tags ) {
// 		// Make the search case-insensitive.
// 		const searchString = queryText.toLowerCase();

// 		// Include an item in the search results if the name or username includes the current user input.
// 		return (
// 			tags.name.toLowerCase().includes( searchString ) ||
// 				tags.id.toLowerCase().includes( searchString )
// 		);
// 	}
// }

// /////////////////////////////////////////////////////////////////////////

import ClassicEditor from '@ckeditor/ckeditor5-editor-classic/src/classiceditor';
import Essentials from '@ckeditor/ckeditor5-essentials/src/essentials';
import Paragraph from '@ckeditor/ckeditor5-paragraph/src/paragraph';
import Heading from '@ckeditor/ckeditor5-heading/src/heading';
import List from '@ckeditor/ckeditor5-list/src/list';
import Bold from '@ckeditor/ckeditor5-basic-styles/src/bold';
import Italic from '@ckeditor/ckeditor5-basic-styles/src/italic';
import Font from '@ckeditor/ckeditor5-font/src/font';
import { Mention } from '@ckeditor/ckeditor5-mention';

const maxCharacters = 20;
const char1 = '';
const char2 = '';
const text = '';

ClassicEditor
	.create( document.querySelector( '#editor' ), {

		plugins: [ Mention, Font, WordCount, Essentials, Paragraph, Heading, List, Bold, Italic ],
		toolbar: [ 'fontSize', 'fontFamily', 'fontColor',
		          'fontBackgroundColor', 'heading', 'bold', 'italic',
		           'numberedList', 'bulletedList' ],
		autosave: {
			save( editor ) {
				return saveData( editor.getData() );
			}
		},
		wordCount: {
			onUpdate: stats => {
				// Prints the current content statistics.
				console.log( `Characters: ${ stats.characters }\nWords: ${ stats.words }` );
			}
		},
		mention: {
			feeds: [
				{
					marker: '@',
					feed: getFeedItems,
					minimumCharacters: 1
				},
				{
					marker: '#',
					feed: getFeedItemsHashtag,
					minimumCharacters: 1
				}
			]
		}

	} )
	.then( editor => {
		CKEditorInspector.attach( editor );

		editor.model.document.on( 'change:data', () => {
			console.log( editor.model.document.selection.getFirstRange().root.getChildStartOffset );
			const html = editor.getData();
			const dom = document.createElement( 'DIV' );
			dom.innerHTML = html;
			const plainText = ( dom.textContent || dom.innerText );

			if ( plainText.length > maxCharacters ) {
				char1 = plainText.slice( 0, maxCharacters );
				char2 = plainText.slice( maxCharacters, plainText.length );
				text = char1 + char2;
				console.log( char1 );
				console.log( char2 );
				// editor.model.change( writer => {
				// 	writer.insertText( `${ char1 }${ char2 }`, editor.model.document.selection.getFirstPosition() );
				// } );
			} else {
				char1 = plainText.slice( 0, maxCharacters );
				char2 = plainText.slice( maxCharacters, plainText.length );
				text = char1 + char2;
				console.log( char1 );
				console.log( char2 );

			}

			setTimeout( () => {
		     	   editor.setData( `<span>${ char1 }</span><span style="background-color:rgba(235, 142, 142, 0.986)">${ char2 }</span>` );
		          	}, 1000 );
		} );

		const wordCountPlugin = editor.plugins.get( 'WordCount' );
		const wordCountWrapper = document.getElementById( 'word-count' );
		wordCountWrapper.appendChild( wordCountPlugin.wordCountContainer );
	} )
	.catch( error => {
		console.error( error.stack );
	} );

const items = [
	{ id: '@swarley', userId: '1', name: 'Barney Stinson', link: 'https://www.imdb.com/title/tt0460649/characters/nm0000439' },
	{ id: '@lilypad', userId: '2', name: 'Lily Aldrin', link: 'https://www.imdb.com/title/tt0460649/characters/nm0004989' },
	{ id: '@marry', userId: '3', name: 'Marry Ann Lewis', link: 'https://www.imdb.com/title/tt0460649/characters/nm1130627' },
	{ id: '@marshmallow', userId: '4', name: 'Marshall Eriksen', link: 'https://www.imdb.com/title/tt0460649/characters/nm0781981' },
	{ id: '@rsparkles', userId: '5', name: 'Robin Scherbatsky', link: 'https://www.imdb.com/title/tt0460649/characters/nm1130627' },
	{ id: '@tdog', userId: '6', name: 'Ted Mosby', link: 'https://www.imdb.com/title/tt0460649/characters/nm1102140' }
];

const tags = [
	{ id: '#swarley', userId: '1', name: 'Barney Stinson', link: 'https://www.imdb.com/title/tt0460649/characters/nm0000439' },
	{ id: '#lilypad', userId: '2', name: 'Lily Aldrin', link: 'https://www.imdb.com/title/tt0460649/characters/nm0004989' },
	{ id: '#marry', userId: '3', name: 'Marry Ann Lewis', link: 'https://www.imdb.com/title/tt0460649/characters/nm1130627' },
	{ id: '#marshmallow', userId: '4', name: 'Marshall Eriksen', link: 'https://www.imdb.com/title/tt0460649/characters/nm0781981' },
	{ id: '#rsparkles', userId: '5', name: 'Robin Scherbatsky', link: 'https://www.imdb.com/title/tt0460649/characters/nm1130627' },
	{ id: 'tdog', userId: '6', name: 'Ted Mosby', link: 'https://www.imdb.com/title/tt0460649/characters/nm1102140' }
];
function getFeedItemsHashtag( queryText ) {
	// As an example of an asynchronous action, return a promise
	// that resolves after a 100ms timeout.
	// This can be a server request or any sort of delayed action.
	return new Promise( resolve => {
		setTimeout( () => {
			const itemsToDisplay = tags
			// Filter out the full list of all items to only those matching the query text.
				.filter( isItemMatching )
			// Return 10 items max - needed for generic queries when the list may contain hundreds of elements.
				.slice( 0, 10 );

			resolve( itemsToDisplay );
		}, 100 );
	} );

	// Filtering function - it uses the `name` and `username` properties of an item to find a match.
	function isItemMatching( tags ) {
		// Make the search case-insensitive.
		const searchString = queryText.toLowerCase();

		// Include an item in the search results if the name or username includes the current user input.
		return (
			tags.name.toLowerCase().includes( searchString ) ||
				tags.id.toLowerCase().includes( searchString )
		);
	}
}

function getFeedItems( queryText ) {
	// As an example of an asynchronous action, return a promise
	// that resolves after a 100ms timeout.
	// This can be a server request or any sort of delayed action.
	return new Promise( resolve => {
		setTimeout( () => {
			const itemsToDisplay = items
			// Filter out the full list of all items to only those matching the query text.
				.filter( isItemMatching )
			// Return 10 items max - needed for generic queries when the list may contain hundreds of elements.
				.slice( 0, 10 );

			resolve( itemsToDisplay );
		}, 100 );
	} );

	// Filtering function - it uses the `name` and `username` properties of an item to find a match.
	function isItemMatching( item ) {
		// Make the search case-insensitive.
		const searchString = queryText.toLowerCase();

		// Include an item in the search results if the name or username includes the current user input.
		return (
			item.name.toLowerCase().includes( searchString ) ||
				item.id.toLowerCase().includes( searchString )
		);
	}
}
